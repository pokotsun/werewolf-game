// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.3
// source: proto/village.proto

package village

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// VillageRequest メッセージ
type CreateVillageRequest struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Name                  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CitizenCount          int32                  `protobuf:"varint,2,opt,name=citizen_count,json=citizenCount,proto3" json:"citizen_count,omitempty"`
	WerewolfCount         int32                  `protobuf:"varint,3,opt,name=werewolf_count,json=werewolfCount,proto3" json:"werewolf_count,omitempty"`
	FortuneTellerCount    int32                  `protobuf:"varint,4,opt,name=fortune_teller_count,json=fortuneTellerCount,proto3" json:"fortune_teller_count,omitempty"`
	KnightCount           int32                  `protobuf:"varint,5,opt,name=knight_count,json=knightCount,proto3" json:"knight_count,omitempty"`
	PsychicCount          int32                  `protobuf:"varint,6,opt,name=psychic_count,json=psychicCount,proto3" json:"psychic_count,omitempty"`
	MadmanCount           int32                  `protobuf:"varint,7,opt,name=madman_count,json=madmanCount,proto3" json:"madman_count,omitempty"`
	IsInitialActionActive bool                   `protobuf:"varint,8,opt,name=is_initial_action_active,json=isInitialActionActive,proto3" json:"is_initial_action_active,omitempty"`
	Password              string                 `protobuf:"bytes,9,opt,name=password,proto3" json:"password,omitempty"`
	GameMasterName        string                 `protobuf:"bytes,10,opt,name=game_master_name,json=gameMasterName,proto3" json:"game_master_name,omitempty"`
	GameMasterPassword    string                 `protobuf:"bytes,11,opt,name=game_master_password,json=gameMasterPassword,proto3" json:"game_master_password,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CreateVillageRequest) Reset() {
	*x = CreateVillageRequest{}
	mi := &file_proto_village_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVillageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVillageRequest) ProtoMessage() {}

func (x *CreateVillageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_village_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVillageRequest.ProtoReflect.Descriptor instead.
func (*CreateVillageRequest) Descriptor() ([]byte, []int) {
	return file_proto_village_proto_rawDescGZIP(), []int{0}
}

func (x *CreateVillageRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateVillageRequest) GetCitizenCount() int32 {
	if x != nil {
		return x.CitizenCount
	}
	return 0
}

func (x *CreateVillageRequest) GetWerewolfCount() int32 {
	if x != nil {
		return x.WerewolfCount
	}
	return 0
}

func (x *CreateVillageRequest) GetFortuneTellerCount() int32 {
	if x != nil {
		return x.FortuneTellerCount
	}
	return 0
}

func (x *CreateVillageRequest) GetKnightCount() int32 {
	if x != nil {
		return x.KnightCount
	}
	return 0
}

func (x *CreateVillageRequest) GetPsychicCount() int32 {
	if x != nil {
		return x.PsychicCount
	}
	return 0
}

func (x *CreateVillageRequest) GetMadmanCount() int32 {
	if x != nil {
		return x.MadmanCount
	}
	return 0
}

func (x *CreateVillageRequest) GetIsInitialActionActive() bool {
	if x != nil {
		return x.IsInitialActionActive
	}
	return false
}

func (x *CreateVillageRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateVillageRequest) GetGameMasterName() string {
	if x != nil {
		return x.GameMasterName
	}
	return ""
}

func (x *CreateVillageRequest) GetGameMasterPassword() string {
	if x != nil {
		return x.GameMasterPassword
	}
	return ""
}

type CreateVillageResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Id                    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	UserNumber            int32                  `protobuf:"varint,3,opt,name=user_number,json=userNumber,proto3" json:"user_number,omitempty"`
	CitizenCount          int32                  `protobuf:"varint,4,opt,name=citizen_count,json=citizenCount,proto3" json:"citizen_count,omitempty"`
	WerewolfCount         int32                  `protobuf:"varint,5,opt,name=werewolf_count,json=werewolfCount,proto3" json:"werewolf_count,omitempty"`
	FortuneTellerCount    int32                  `protobuf:"varint,6,opt,name=fortune_teller_count,json=fortuneTellerCount,proto3" json:"fortune_teller_count,omitempty"`
	KnightCount           int32                  `protobuf:"varint,7,opt,name=knight_count,json=knightCount,proto3" json:"knight_count,omitempty"`
	PsychicCount          int32                  `protobuf:"varint,8,opt,name=psychic_count,json=psychicCount,proto3" json:"psychic_count,omitempty"`
	MadmanCount           int32                  `protobuf:"varint,9,opt,name=madman_count,json=madmanCount,proto3" json:"madman_count,omitempty"`
	IsInitialActionActive bool                   `protobuf:"varint,10,opt,name=is_initial_action_active,json=isInitialActionActive,proto3" json:"is_initial_action_active,omitempty"`
	GameMasterUserId      string                 `protobuf:"bytes,11,opt,name=game_master_user_id,json=gameMasterUserId,proto3" json:"game_master_user_id,omitempty"`
	CurrentUserNumber     int32                  `protobuf:"varint,12,opt,name=current_user_number,json=currentUserNumber,proto3" json:"current_user_number,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CreateVillageResponse) Reset() {
	*x = CreateVillageResponse{}
	mi := &file_proto_village_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVillageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVillageResponse) ProtoMessage() {}

func (x *CreateVillageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_village_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVillageResponse.ProtoReflect.Descriptor instead.
func (*CreateVillageResponse) Descriptor() ([]byte, []int) {
	return file_proto_village_proto_rawDescGZIP(), []int{1}
}

func (x *CreateVillageResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateVillageResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateVillageResponse) GetUserNumber() int32 {
	if x != nil {
		return x.UserNumber
	}
	return 0
}

func (x *CreateVillageResponse) GetCitizenCount() int32 {
	if x != nil {
		return x.CitizenCount
	}
	return 0
}

func (x *CreateVillageResponse) GetWerewolfCount() int32 {
	if x != nil {
		return x.WerewolfCount
	}
	return 0
}

func (x *CreateVillageResponse) GetFortuneTellerCount() int32 {
	if x != nil {
		return x.FortuneTellerCount
	}
	return 0
}

func (x *CreateVillageResponse) GetKnightCount() int32 {
	if x != nil {
		return x.KnightCount
	}
	return 0
}

func (x *CreateVillageResponse) GetPsychicCount() int32 {
	if x != nil {
		return x.PsychicCount
	}
	return 0
}

func (x *CreateVillageResponse) GetMadmanCount() int32 {
	if x != nil {
		return x.MadmanCount
	}
	return 0
}

func (x *CreateVillageResponse) GetIsInitialActionActive() bool {
	if x != nil {
		return x.IsInitialActionActive
	}
	return false
}

func (x *CreateVillageResponse) GetGameMasterUserId() string {
	if x != nil {
		return x.GameMasterUserId
	}
	return ""
}

func (x *CreateVillageResponse) GetCurrentUserNumber() int32 {
	if x != nil {
		return x.CurrentUserNumber
	}
	return 0
}

// ListVillagesRequest メッセージ
type ListVillagesRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	IsRecruitedOnly bool                   `protobuf:"varint,1,opt,name=is_recruited_only,json=isRecruitedOnly,proto3" json:"is_recruited_only,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ListVillagesRequest) Reset() {
	*x = ListVillagesRequest{}
	mi := &file_proto_village_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVillagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVillagesRequest) ProtoMessage() {}

func (x *ListVillagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_village_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVillagesRequest.ProtoReflect.Descriptor instead.
func (*ListVillagesRequest) Descriptor() ([]byte, []int) {
	return file_proto_village_proto_rawDescGZIP(), []int{2}
}

func (x *ListVillagesRequest) GetIsRecruitedOnly() bool {
	if x != nil {
		return x.IsRecruitedOnly
	}
	return false
}

// ListVillagesResponse メッセージ
type ListVillagesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Villages      []*VillageResponse     `protobuf:"bytes,1,rep,name=villages,proto3" json:"villages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVillagesResponse) Reset() {
	*x = ListVillagesResponse{}
	mi := &file_proto_village_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVillagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVillagesResponse) ProtoMessage() {}

func (x *ListVillagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_village_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVillagesResponse.ProtoReflect.Descriptor instead.
func (*ListVillagesResponse) Descriptor() ([]byte, []int) {
	return file_proto_village_proto_rawDescGZIP(), []int{3}
}

func (x *ListVillagesResponse) GetVillages() []*VillageResponse {
	if x != nil {
		return x.Villages
	}
	return nil
}

type VillageResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Id                    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	UserNumber            int32                  `protobuf:"varint,3,opt,name=user_number,json=userNumber,proto3" json:"user_number,omitempty"`
	CitizenCount          int32                  `protobuf:"varint,4,opt,name=citizen_count,json=citizenCount,proto3" json:"citizen_count,omitempty"`
	WerewolfCount         int32                  `protobuf:"varint,5,opt,name=werewolf_count,json=werewolfCount,proto3" json:"werewolf_count,omitempty"`
	FortuneTellerCount    int32                  `protobuf:"varint,6,opt,name=fortune_teller_count,json=fortuneTellerCount,proto3" json:"fortune_teller_count,omitempty"`
	KnightCount           int32                  `protobuf:"varint,7,opt,name=knight_count,json=knightCount,proto3" json:"knight_count,omitempty"`
	PsychicCount          int32                  `protobuf:"varint,8,opt,name=psychic_count,json=psychicCount,proto3" json:"psychic_count,omitempty"`
	MadmanCount           int32                  `protobuf:"varint,9,opt,name=madman_count,json=madmanCount,proto3" json:"madman_count,omitempty"`
	IsInitialActionActive bool                   `protobuf:"varint,10,opt,name=is_initial_action_active,json=isInitialActionActive,proto3" json:"is_initial_action_active,omitempty"`
	CurrentUserNumber     int32                  `protobuf:"varint,11,opt,name=current_user_number,json=currentUserNumber,proto3" json:"current_user_number,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *VillageResponse) Reset() {
	*x = VillageResponse{}
	mi := &file_proto_village_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VillageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VillageResponse) ProtoMessage() {}

func (x *VillageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_village_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VillageResponse.ProtoReflect.Descriptor instead.
func (*VillageResponse) Descriptor() ([]byte, []int) {
	return file_proto_village_proto_rawDescGZIP(), []int{4}
}

func (x *VillageResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VillageResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VillageResponse) GetUserNumber() int32 {
	if x != nil {
		return x.UserNumber
	}
	return 0
}

func (x *VillageResponse) GetCitizenCount() int32 {
	if x != nil {
		return x.CitizenCount
	}
	return 0
}

func (x *VillageResponse) GetWerewolfCount() int32 {
	if x != nil {
		return x.WerewolfCount
	}
	return 0
}

func (x *VillageResponse) GetFortuneTellerCount() int32 {
	if x != nil {
		return x.FortuneTellerCount
	}
	return 0
}

func (x *VillageResponse) GetKnightCount() int32 {
	if x != nil {
		return x.KnightCount
	}
	return 0
}

func (x *VillageResponse) GetPsychicCount() int32 {
	if x != nil {
		return x.PsychicCount
	}
	return 0
}

func (x *VillageResponse) GetMadmanCount() int32 {
	if x != nil {
		return x.MadmanCount
	}
	return 0
}

func (x *VillageResponse) GetIsInitialActionActive() bool {
	if x != nil {
		return x.IsInitialActionActive
	}
	return false
}

func (x *VillageResponse) GetCurrentUserNumber() int32 {
	if x != nil {
		return x.CurrentUserNumber
	}
	return 0
}

// EnterVillageRequest メッセージ
type EnterVillageRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	VillageId       string                 `protobuf:"bytes,1,opt,name=village_id,json=villageId,proto3" json:"village_id,omitempty"`
	VillagePassword string                 `protobuf:"bytes,2,opt,name=village_password,json=villagePassword,proto3" json:"village_password,omitempty"`
	UserName        string                 `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	UserPassword    string                 `protobuf:"bytes,4,opt,name=user_password,json=userPassword,proto3" json:"user_password,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EnterVillageRequest) Reset() {
	*x = EnterVillageRequest{}
	mi := &file_proto_village_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnterVillageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterVillageRequest) ProtoMessage() {}

func (x *EnterVillageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_village_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterVillageRequest.ProtoReflect.Descriptor instead.
func (*EnterVillageRequest) Descriptor() ([]byte, []int) {
	return file_proto_village_proto_rawDescGZIP(), []int{5}
}

func (x *EnterVillageRequest) GetVillageId() string {
	if x != nil {
		return x.VillageId
	}
	return ""
}

func (x *EnterVillageRequest) GetVillagePassword() string {
	if x != nil {
		return x.VillagePassword
	}
	return ""
}

func (x *EnterVillageRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *EnterVillageRequest) GetUserPassword() string {
	if x != nil {
		return x.UserPassword
	}
	return ""
}

// EnterVillageResponse メッセージ
type EnterVillageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VillageId     string                 `protobuf:"bytes,1,opt,name=village_id,json=villageId,proto3" json:"village_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnterVillageResponse) Reset() {
	*x = EnterVillageResponse{}
	mi := &file_proto_village_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnterVillageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterVillageResponse) ProtoMessage() {}

func (x *EnterVillageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_village_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterVillageResponse.ProtoReflect.Descriptor instead.
func (*EnterVillageResponse) Descriptor() ([]byte, []int) {
	return file_proto_village_proto_rawDescGZIP(), []int{6}
}

func (x *EnterVillageResponse) GetVillageId() string {
	if x != nil {
		return x.VillageId
	}
	return ""
}

func (x *EnterVillageResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// GetCurrentVillageUsersRequest メッセージ
type GetCurrentVillageUsersRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	VillageId       string                 `protobuf:"bytes,1,opt,name=village_id,json=villageId,proto3" json:"village_id,omitempty"`
	VillagePassword string                 `protobuf:"bytes,2,opt,name=village_password,json=villagePassword,proto3" json:"village_password,omitempty"`
	UserId          string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserPassword    string                 `protobuf:"bytes,4,opt,name=user_password,json=userPassword,proto3" json:"user_password,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetCurrentVillageUsersRequest) Reset() {
	*x = GetCurrentVillageUsersRequest{}
	mi := &file_proto_village_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCurrentVillageUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentVillageUsersRequest) ProtoMessage() {}

func (x *GetCurrentVillageUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_village_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentVillageUsersRequest.ProtoReflect.Descriptor instead.
func (*GetCurrentVillageUsersRequest) Descriptor() ([]byte, []int) {
	return file_proto_village_proto_rawDescGZIP(), []int{7}
}

func (x *GetCurrentVillageUsersRequest) GetVillageId() string {
	if x != nil {
		return x.VillageId
	}
	return ""
}

func (x *GetCurrentVillageUsersRequest) GetVillagePassword() string {
	if x != nil {
		return x.VillagePassword
	}
	return ""
}

func (x *GetCurrentVillageUsersRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetCurrentVillageUsersRequest) GetUserPassword() string {
	if x != nil {
		return x.UserPassword
	}
	return ""
}

// GetCurrentVillageUsersResponse メッセージ
type GetCurrentVillageUsersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VillageId     string                 `protobuf:"bytes,1,opt,name=village_id,json=villageId,proto3" json:"village_id,omitempty"`
	CurrentUsers  []*CurrentUserResponse `protobuf:"bytes,2,rep,name=current_users,json=currentUsers,proto3" json:"current_users,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCurrentVillageUsersResponse) Reset() {
	*x = GetCurrentVillageUsersResponse{}
	mi := &file_proto_village_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCurrentVillageUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentVillageUsersResponse) ProtoMessage() {}

func (x *GetCurrentVillageUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_village_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentVillageUsersResponse.ProtoReflect.Descriptor instead.
func (*GetCurrentVillageUsersResponse) Descriptor() ([]byte, []int) {
	return file_proto_village_proto_rawDescGZIP(), []int{8}
}

func (x *GetCurrentVillageUsersResponse) GetVillageId() string {
	if x != nil {
		return x.VillageId
	}
	return ""
}

func (x *GetCurrentVillageUsersResponse) GetCurrentUsers() []*CurrentUserResponse {
	if x != nil {
		return x.CurrentUsers
	}
	return nil
}

type CurrentUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserName      string                 `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CurrentUserResponse) Reset() {
	*x = CurrentUserResponse{}
	mi := &file_proto_village_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurrentUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentUserResponse) ProtoMessage() {}

func (x *CurrentUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_village_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentUserResponse.ProtoReflect.Descriptor instead.
func (*CurrentUserResponse) Descriptor() ([]byte, []int) {
	return file_proto_village_proto_rawDescGZIP(), []int{9}
}

func (x *CurrentUserResponse) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

var File_proto_village_proto protoreflect.FileDescriptor

var file_proto_village_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x22, 0xc4,
	0x03, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x77, 0x65, 0x72, 0x65, 0x77, 0x6f, 0x6c, 0x66, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x65, 0x72, 0x65, 0x77, 0x6f,
	0x6c, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x6f, 0x72, 0x74, 0x75,
	0x6e, 0x65, 0x5f, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x66, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x54, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6b, 0x6e, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6b, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x73, 0x79, 0x63, 0x68, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x73, 0x79, 0x63, 0x68, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xdd, 0x03, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x69, 0x74,
	0x69, 0x7a, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x65, 0x72,
	0x65, 0x77, 0x6f, 0x6c, 0x66, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x77, 0x65, 0x72, 0x65, 0x77, 0x6f, 0x6c, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x66, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x5f, 0x74, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x66, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x54, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6b, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6b, 0x6e, 0x69, 0x67, 0x68, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x73, 0x79, 0x63, 0x68, 0x69, 0x63,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x73,
	0x79, 0x63, 0x68, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61,
	0x64, 0x6d, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x6d, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a,
	0x18, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x69, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x41, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x6c,
	0x6c, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x52, 0x65, 0x63, 0x72, 0x75,
	0x69, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x4c, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x08, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x69, 0x6c,
	0x6c, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x76, 0x69,
	0x6c, 0x6c, 0x61, 0x67, 0x65, 0x73, 0x22, 0xa8, 0x03, 0x0a, 0x0f, 0x56, 0x69, 0x6c, 0x6c, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x65, 0x72, 0x65, 0x77, 0x6f, 0x6c, 0x66,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x65,
	0x72, 0x65, 0x77, 0x6f, 0x6c, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x66,
	0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x5f, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x66, 0x6f, 0x72, 0x74, 0x75,
	0x6e, 0x65, 0x54, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x6b, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6b, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x73, 0x79, 0x63, 0x68, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x73, 0x79, 0x63, 0x68, 0x69, 0x63,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x64,
	0x6d, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0xa1, 0x01, 0x0a, 0x13, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x69, 0x6c, 0x6c, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x6c,
	0x6c, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76,
	0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x69, 0x6c, 0x6c,
	0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x4e, 0x0a, 0x14, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x69,
	0x6c, 0x6c, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x6c, 0x6c, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x6c,
	0x6c, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67,
	0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0x82, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x69,
	0x6c, 0x6c, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x41, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x6c, 0x6c, 0x61,
	0x67, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x22, 0x32, 0x0a, 0x13, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0xe7, 0x02, 0x0a, 0x0e, 0x56, 0x69, 0x6c,
	0x6c, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x2e, 0x76,
	0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x6c,
	0x6c, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x76, 0x69,
	0x6c, 0x6c, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x6c, 0x6c,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x76, 0x69,
	0x6c, 0x6c, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x76, 0x69, 0x6c, 0x6c,
	0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x2e, 0x76, 0x69, 0x6c, 0x6c, 0x61,
	0x67, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65,
	0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x26, 0x2e, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x6c, 0x6c,
	0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x42, 0x6c, 0x0a, 0x28, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x6b, 0x6f, 0x74, 0x6c, 0x69, 0x6e, 0x2e,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x42, 0x13,
	0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x70, 0x6f, 0x6b, 0x6f, 0x74, 0x73, 0x75, 0x6e, 0x2f, 0x77, 0x65, 0x72, 0x65, 0x77,
	0x6f, 0x6c, 0x66, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_village_proto_rawDescOnce sync.Once
	file_proto_village_proto_rawDescData = file_proto_village_proto_rawDesc
)

func file_proto_village_proto_rawDescGZIP() []byte {
	file_proto_village_proto_rawDescOnce.Do(func() {
		file_proto_village_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_village_proto_rawDescData)
	})
	return file_proto_village_proto_rawDescData
}

var file_proto_village_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_village_proto_goTypes = []any{
	(*CreateVillageRequest)(nil),           // 0: village.CreateVillageRequest
	(*CreateVillageResponse)(nil),          // 1: village.CreateVillageResponse
	(*ListVillagesRequest)(nil),            // 2: village.ListVillagesRequest
	(*ListVillagesResponse)(nil),           // 3: village.ListVillagesResponse
	(*VillageResponse)(nil),                // 4: village.VillageResponse
	(*EnterVillageRequest)(nil),            // 5: village.EnterVillageRequest
	(*EnterVillageResponse)(nil),           // 6: village.EnterVillageResponse
	(*GetCurrentVillageUsersRequest)(nil),  // 7: village.GetCurrentVillageUsersRequest
	(*GetCurrentVillageUsersResponse)(nil), // 8: village.GetCurrentVillageUsersResponse
	(*CurrentUserResponse)(nil),            // 9: village.CurrentUserResponse
}
var file_proto_village_proto_depIdxs = []int32{
	4, // 0: village.ListVillagesResponse.villages:type_name -> village.VillageResponse
	9, // 1: village.GetCurrentVillageUsersResponse.current_users:type_name -> village.CurrentUserResponse
	0, // 2: village.VillageService.CreateVillage:input_type -> village.CreateVillageRequest
	2, // 3: village.VillageService.ListVillages:input_type -> village.ListVillagesRequest
	5, // 4: village.VillageService.EnterVillage:input_type -> village.EnterVillageRequest
	7, // 5: village.VillageService.GetCurrentVillageUsers:input_type -> village.GetCurrentVillageUsersRequest
	1, // 6: village.VillageService.CreateVillage:output_type -> village.CreateVillageResponse
	3, // 7: village.VillageService.ListVillages:output_type -> village.ListVillagesResponse
	6, // 8: village.VillageService.EnterVillage:output_type -> village.EnterVillageResponse
	8, // 9: village.VillageService.GetCurrentVillageUsers:output_type -> village.GetCurrentVillageUsersResponse
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_proto_village_proto_init() }
func file_proto_village_proto_init() {
	if File_proto_village_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_village_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_village_proto_goTypes,
		DependencyIndexes: file_proto_village_proto_depIdxs,
		MessageInfos:      file_proto_village_proto_msgTypes,
	}.Build()
	File_proto_village_proto = out.File
	file_proto_village_proto_rawDesc = nil
	file_proto_village_proto_goTypes = nil
	file_proto_village_proto_depIdxs = nil
}
