// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/village.proto

package village

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VillageService_CreateVillage_FullMethodName = "/village.VillageService/CreateVillage"
	VillageService_ListVillages_FullMethodName  = "/village.VillageService/ListVillages"
	VillageService_EnterVillage_FullMethodName  = "/village.VillageService/EnterVillage"
)

// VillageServiceClient is the client API for VillageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// VillageService 定義
type VillageServiceClient interface {
	CreateVillage(ctx context.Context, in *CreateVillageRequest, opts ...grpc.CallOption) (*CreateVillageResponse, error)
	ListVillages(ctx context.Context, in *ListVillagesRequest, opts ...grpc.CallOption) (*ListVillagesResponse, error)
	EnterVillage(ctx context.Context, in *EnterVillageRequest, opts ...grpc.CallOption) (*EnterVillageResponse, error)
}

type villageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVillageServiceClient(cc grpc.ClientConnInterface) VillageServiceClient {
	return &villageServiceClient{cc}
}

func (c *villageServiceClient) CreateVillage(ctx context.Context, in *CreateVillageRequest, opts ...grpc.CallOption) (*CreateVillageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVillageResponse)
	err := c.cc.Invoke(ctx, VillageService_CreateVillage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *villageServiceClient) ListVillages(ctx context.Context, in *ListVillagesRequest, opts ...grpc.CallOption) (*ListVillagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVillagesResponse)
	err := c.cc.Invoke(ctx, VillageService_ListVillages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *villageServiceClient) EnterVillage(ctx context.Context, in *EnterVillageRequest, opts ...grpc.CallOption) (*EnterVillageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnterVillageResponse)
	err := c.cc.Invoke(ctx, VillageService_EnterVillage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VillageServiceServer is the server API for VillageService service.
// All implementations must embed UnimplementedVillageServiceServer
// for forward compatibility.
//
// VillageService 定義
type VillageServiceServer interface {
	CreateVillage(context.Context, *CreateVillageRequest) (*CreateVillageResponse, error)
	ListVillages(context.Context, *ListVillagesRequest) (*ListVillagesResponse, error)
	EnterVillage(context.Context, *EnterVillageRequest) (*EnterVillageResponse, error)
	mustEmbedUnimplementedVillageServiceServer()
}

// UnimplementedVillageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVillageServiceServer struct{}

func (UnimplementedVillageServiceServer) CreateVillage(context.Context, *CreateVillageRequest) (*CreateVillageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVillage not implemented")
}
func (UnimplementedVillageServiceServer) ListVillages(context.Context, *ListVillagesRequest) (*ListVillagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVillages not implemented")
}
func (UnimplementedVillageServiceServer) EnterVillage(context.Context, *EnterVillageRequest) (*EnterVillageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterVillage not implemented")
}
func (UnimplementedVillageServiceServer) mustEmbedUnimplementedVillageServiceServer() {}
func (UnimplementedVillageServiceServer) testEmbeddedByValue()                        {}

// UnsafeVillageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VillageServiceServer will
// result in compilation errors.
type UnsafeVillageServiceServer interface {
	mustEmbedUnimplementedVillageServiceServer()
}

func RegisterVillageServiceServer(s grpc.ServiceRegistrar, srv VillageServiceServer) {
	// If the following call pancis, it indicates UnimplementedVillageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VillageService_ServiceDesc, srv)
}

func _VillageService_CreateVillage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVillageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VillageServiceServer).CreateVillage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VillageService_CreateVillage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VillageServiceServer).CreateVillage(ctx, req.(*CreateVillageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VillageService_ListVillages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVillagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VillageServiceServer).ListVillages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VillageService_ListVillages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VillageServiceServer).ListVillages(ctx, req.(*ListVillagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VillageService_EnterVillage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnterVillageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VillageServiceServer).EnterVillage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VillageService_EnterVillage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VillageServiceServer).EnterVillage(ctx, req.(*EnterVillageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VillageService_ServiceDesc is the grpc.ServiceDesc for VillageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VillageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "village.VillageService",
	HandlerType: (*VillageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVillage",
			Handler:    _VillageService_CreateVillage_Handler,
		},
		{
			MethodName: "ListVillages",
			Handler:    _VillageService_ListVillages_Handler,
		},
		{
			MethodName: "EnterVillage",
			Handler:    _VillageService_EnterVillage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/village.proto",
}
