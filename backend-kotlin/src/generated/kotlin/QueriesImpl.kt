// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package com.example.generated

import java.sql.Connection
import java.sql.SQLException
import java.sql.Statement
import java.time.LocalDateTime

const val getUser = """-- name: getUser :one
SELECT user_id, name, updated_at FROM user
        WHERE user_id = ? LIMIT 1
"""

class QueriesImpl(private val conn: Connection) : Queries {

  @Throws(SQLException::class)
  override fun getUser(userId: Int): User? {
    return conn.prepareStatement(getUser).use { stmt ->
      stmt.setInt(1, userId)

      val results = stmt.executeQuery()
      if (!results.next()) {
        return null
      }
      val ret = User(
                results.getInt(1),
                results.getString(2),
                results.getObject(3, LocalDateTime::class.java)
            )
      if (results.next()) {
          throw SQLException("expected one row in result set, but got many")
      }
      ret
    }
  }

}

